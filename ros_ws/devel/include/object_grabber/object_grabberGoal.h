// Generated by gencpp from file object_grabber/object_grabberGoal.msg
// DO NOT EDIT!


#ifndef OBJECT_GRABBER_MESSAGE_OBJECT_GRABBERGOAL_H
#define OBJECT_GRABBER_MESSAGE_OBJECT_GRABBERGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace object_grabber
{
template <class ContainerAllocator>
struct object_grabberGoal_
{
  typedef object_grabberGoal_<ContainerAllocator> Type;

  object_grabberGoal_()
    : action_code(0)
    , object_id(0)
    , grasp_option(0)
    , approach_strategy(0)
    , lift_object_strategy(0)
    , dropoff_strategy(0)
    , dropoff_withdraw_strategy(0)
    , object_frame()
    , speed_factor(0.0)
    , gripper_test_params()  {
    }
  object_grabberGoal_(const ContainerAllocator& _alloc)
    : action_code(0)
    , object_id(0)
    , grasp_option(0)
    , approach_strategy(0)
    , lift_object_strategy(0)
    , dropoff_strategy(0)
    , dropoff_withdraw_strategy(0)
    , object_frame(_alloc)
    , speed_factor(0.0)
    , gripper_test_params(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _action_code_type;
  _action_code_type action_code;

   typedef int32_t _object_id_type;
  _object_id_type object_id;

   typedef int32_t _grasp_option_type;
  _grasp_option_type grasp_option;

   typedef int32_t _approach_strategy_type;
  _approach_strategy_type approach_strategy;

   typedef int32_t _lift_object_strategy_type;
  _lift_object_strategy_type lift_object_strategy;

   typedef int32_t _dropoff_strategy_type;
  _dropoff_strategy_type dropoff_strategy;

   typedef int32_t _dropoff_withdraw_strategy_type;
  _dropoff_withdraw_strategy_type dropoff_withdraw_strategy;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _object_frame_type;
  _object_frame_type object_frame;

   typedef double _speed_factor_type;
  _speed_factor_type speed_factor;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _gripper_test_params_type;
  _gripper_test_params_type gripper_test_params;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TEST_CODE)
  #undef TEST_CODE
#endif
#if defined(_WIN32) && defined(MOVE_TO_WAITING_POSE)
  #undef MOVE_TO_WAITING_POSE
#endif
#if defined(_WIN32) && defined(PLAN_MOVE_TO_GRASP_POSE)
  #undef PLAN_MOVE_TO_GRASP_POSE
#endif
#if defined(_WIN32) && defined(PLAN_MOVE_FINE_TO_GRASP_POSE)
  #undef PLAN_MOVE_FINE_TO_GRASP_POSE
#endif
#if defined(_WIN32) && defined(PLAN_MOVE_OBJECT_JSPACE)
  #undef PLAN_MOVE_OBJECT_JSPACE
#endif
#if defined(_WIN32) && defined(PLAN_MOVE_OBJECT_CSPACE)
  #undef PLAN_MOVE_OBJECT_CSPACE
#endif
#if defined(_WIN32) && defined(PLAN_MOVE_FINE_OBJECT_CSPACE)
  #undef PLAN_MOVE_FINE_OBJECT_CSPACE
#endif
#if defined(_WIN32) && defined(PLAN_WITHDRAW_FROM_OBJECT)
  #undef PLAN_WITHDRAW_FROM_OBJECT
#endif
#if defined(_WIN32) && defined(PLAN_WITHDRAW_FINE_FROM_OBJECT)
  #undef PLAN_WITHDRAW_FINE_FROM_OBJECT
#endif
#if defined(_WIN32) && defined(PLAN_OBJECT_GRASP)
  #undef PLAN_OBJECT_GRASP
#endif
#if defined(_WIN32) && defined(CART_MOVE_CURRENT_TO_CART_GOAL)
  #undef CART_MOVE_CURRENT_TO_CART_GOAL
#endif
#if defined(_WIN32) && defined(GRAB_OBJECT)
  #undef GRAB_OBJECT
#endif
#if defined(_WIN32) && defined(DROPOFF_OBJECT)
  #undef DROPOFF_OBJECT
#endif
#if defined(_WIN32) && defined(STRADDLE_OBJECT)
  #undef STRADDLE_OBJECT
#endif
#if defined(_WIN32) && defined(SET_SPEED_FACTOR)
  #undef SET_SPEED_FACTOR
#endif
#if defined(_WIN32) && defined(DEFAULT_GRASP_STRATEGY)
  #undef DEFAULT_GRASP_STRATEGY
#endif
#if defined(_WIN32) && defined(EXECUTE_PLANNED_MOVE)
  #undef EXECUTE_PLANNED_MOVE
#endif
#if defined(_WIN32) && defined(GRIPPER_PREPARE_GRASP_OBJECT)
  #undef GRIPPER_PREPARE_GRASP_OBJECT
#endif
#if defined(_WIN32) && defined(GRIPPER_GRASP_OBJECT)
  #undef GRIPPER_GRASP_OBJECT
#endif
#if defined(_WIN32) && defined(GRIPPER_RELEASE_OBJECT)
  #undef GRIPPER_RELEASE_OBJECT
#endif
#if defined(_WIN32) && defined(GRIPPER_IS_OBJECT_GRASPED)
  #undef GRIPPER_IS_OBJECT_GRASPED
#endif

  enum {
    TEST_CODE = 0,
    MOVE_TO_WAITING_POSE = 1,
    PLAN_MOVE_TO_GRASP_POSE = 2,
    PLAN_MOVE_FINE_TO_GRASP_POSE = 3,
    PLAN_MOVE_OBJECT_JSPACE = 4,
    PLAN_MOVE_OBJECT_CSPACE = 5,
    PLAN_MOVE_FINE_OBJECT_CSPACE = 6,
    PLAN_WITHDRAW_FROM_OBJECT = 7,
    PLAN_WITHDRAW_FINE_FROM_OBJECT = 8,
    PLAN_OBJECT_GRASP = 9,
    CART_MOVE_CURRENT_TO_CART_GOAL = 10,
    GRAB_OBJECT = 101,
    DROPOFF_OBJECT = 102,
    STRADDLE_OBJECT = 103,
    SET_SPEED_FACTOR = 10,
    DEFAULT_GRASP_STRATEGY = 0,
    EXECUTE_PLANNED_MOVE = 100,
    GRIPPER_PREPARE_GRASP_OBJECT = 20,
    GRIPPER_GRASP_OBJECT = 21,
    GRIPPER_RELEASE_OBJECT = 22,
    GRIPPER_IS_OBJECT_GRASPED = 23,
  };


  typedef boost::shared_ptr< ::object_grabber::object_grabberGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_grabber::object_grabberGoal_<ContainerAllocator> const> ConstPtr;

}; // struct object_grabberGoal_

typedef ::object_grabber::object_grabberGoal_<std::allocator<void> > object_grabberGoal;

typedef boost::shared_ptr< ::object_grabber::object_grabberGoal > object_grabberGoalPtr;
typedef boost::shared_ptr< ::object_grabber::object_grabberGoal const> object_grabberGoalConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_grabber::object_grabberGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_grabber::object_grabberGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_grabber::object_grabberGoal_<ContainerAllocator1> & lhs, const ::object_grabber::object_grabberGoal_<ContainerAllocator2> & rhs)
{
  return lhs.action_code == rhs.action_code &&
    lhs.object_id == rhs.object_id &&
    lhs.grasp_option == rhs.grasp_option &&
    lhs.approach_strategy == rhs.approach_strategy &&
    lhs.lift_object_strategy == rhs.lift_object_strategy &&
    lhs.dropoff_strategy == rhs.dropoff_strategy &&
    lhs.dropoff_withdraw_strategy == rhs.dropoff_withdraw_strategy &&
    lhs.object_frame == rhs.object_frame &&
    lhs.speed_factor == rhs.speed_factor &&
    lhs.gripper_test_params == rhs.gripper_test_params;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_grabber::object_grabberGoal_<ContainerAllocator1> & lhs, const ::object_grabber::object_grabberGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_grabber

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_grabber::object_grabberGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_grabber::object_grabberGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_grabber::object_grabberGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "be483bfd87df74289719d347ad9709f1";
  }

  static const char* value(const ::object_grabber::object_grabberGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbe483bfd87df7428ULL;
  static const uint64_t static_value2 = 0x9719d347ad9709f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_grabber/object_grabberGoal";
  }

  static const char* value(const ::object_grabber::object_grabberGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#object_grabber action message\n"
"#pass in an object code and the object's frame (w/rt named frame_id)\n"
"#object_grabber will plan approach, grasp and lift of object\n"
"#returns codes regarding outcome\n"
"\n"
"# Action Codes\n"
"\n"
"# Pre-Grasp\n"
"int32 TEST_CODE                         = 0     # \"ping\" action server\n"
"int32 MOVE_TO_WAITING_POSE              = 1     # pre-pose motion: defined on param server out of way of sensors\n"
"\n"
"int32 PLAN_MOVE_TO_GRASP_POSE           = 2     # expects (1) current_object_pose, (2) object_ID, (3) grasp_option, (4) approach_option\n"
"                                                # + send separate \"grasp\" command to gripper\n"
"\n"
"int32 PLAN_MOVE_FINE_TO_GRASP_POSE      = 3     # as above, but finer/slower motion \n"
"\n"
"### Move Object\n"
"int32 PLAN_MOVE_OBJECT_JSPACE           = 4     # move grasped object to dest in joint-space\n"
"                                                # expects: (i) des_object_pose, (2) object_ID, (3) grasp_option\n"
"\n"
"int32 PLAN_MOVE_OBJECT_CSPACE           = 5     # move grasped object to dest in cart-space\n"
"                                                # expects as above\n"
"\n"
"int32 PLAN_MOVE_FINE_OBJECT_CSPACE      = 6     # as above, but finer/slower motion\n"
"\n"
"### Post-Grasp\n"
"int32 PLAN_WITHDRAW_FROM_OBJECT         = 7     # after grasp released, use strategy to depart object \n"
"                                                # (1) object_ID, (2) grasp_option, (3) depart_option\n"
"\n"
"int32 PLAN_WITHDRAW_FINE_FROM_OBJECT    = 8     # as above, but finer/slower motion\n"
"\n"
"### Combined actions \n"
"int32 PLAN_OBJECT_GRASP                 = 9     # combine multiple elements above to acquire an object\n"
"\n"
"int32 CART_MOVE_CURRENT_TO_CART_GOAL    = 10    # plan/execute move to cartesian goal specified in \"geometry_msgs/PoseStamped object_frame\"\n"
"\n"
"int32 GRAB_OBJECT                       = 101   # plan/execute object grasp & lift\n"
"int32 DROPOFF_OBJECT                    = 102   # plan/execute object placement and arm withdrawal\n"
"int32 STRADDLE_OBJECT                   = 103   # plan/execute part of GRAB_OBJECT: move to grasp pose, then halt\n"
"\n"
"int32 SET_SPEED_FACTOR = 10                     # arg: changes trajectory time-scale: > 1.0 ==> slower\n"
"\n"
"### Strategies:\n"
"int32 DEFAULT_GRASP_STRATEGY            = 0     # executes approach and depart strategies. \n"
"\n"
"int32 EXECUTE_PLANNED_MOVE = 100                # accept arm-motion plan and enable its execution\n"
"\n"
"### Gripper commands:\n"
"int32 GRIPPER_PREPARE_GRASP_OBJECT      = 20    # Prepare for grasp approach (open fingers)\n"
"\n"
"int32 GRIPPER_GRASP_OBJECT              = 21    # Perform appropriate action to grasp object (assumes gripper in appropriate pose)\n"
"                                                # Client does not need to know what type of gripper is used\n"
"\n"
"int32 GRIPPER_RELEASE_OBJECT            = 22    # Release a grasped object\n"
"                                                # (1) obj ID, (2) Grasp option\n"
"\n"
"int32 GRIPPER_IS_OBJECT_GRASPED         = 23    # Query (ret bool)\n"
"                                                # (1) object_ID, (2) grasp option, and/or (3)  grasp test parameters; \n"
"\n"
"###                               \n"
"\n"
"#goal:\n"
"int32 action_code                               # See codes above (i.e. MOVE_TO_WAITING_POSE, GRAB_OBJECT, DROPOFF_OBJECT)\n"
"int32 object_id\n"
"int32 grasp_option\n"
"\n"
"# Strategies: approach, grasp, lift, withdraw\n"
"int32 approach_strategy\n"
"int32 lift_object_strategy\n"
"int32 dropoff_strategy\n"
"int32 dropoff_withdraw_strategy\n"
"\n"
"geometry_msgs/PoseStamped object_frame          # wrt system_ref_frame or tf to this frame available\n"
"float64                   speed_factor          # default 1.0\n"
"float64[]                 gripper_test_params\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::object_grabber::object_grabberGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_code);
      stream.next(m.object_id);
      stream.next(m.grasp_option);
      stream.next(m.approach_strategy);
      stream.next(m.lift_object_strategy);
      stream.next(m.dropoff_strategy);
      stream.next(m.dropoff_withdraw_strategy);
      stream.next(m.object_frame);
      stream.next(m.speed_factor);
      stream.next(m.gripper_test_params);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_grabberGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_grabber::object_grabberGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_grabber::object_grabberGoal_<ContainerAllocator>& v)
  {
    s << indent << "action_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_code);
    s << indent << "object_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "grasp_option: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grasp_option);
    s << indent << "approach_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.approach_strategy);
    s << indent << "lift_object_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lift_object_strategy);
    s << indent << "dropoff_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dropoff_strategy);
    s << indent << "dropoff_withdraw_strategy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dropoff_withdraw_strategy);
    s << indent << "object_frame: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.object_frame);
    s << indent << "speed_factor: ";
    Printer<double>::stream(s, indent + "  ", v.speed_factor);
    s << indent << "gripper_test_params[]" << std::endl;
    for (size_t i = 0; i < v.gripper_test_params.size(); ++i)
    {
      s << indent << "  gripper_test_params[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gripper_test_params[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_GRABBER_MESSAGE_OBJECT_GRABBERGOAL_H
